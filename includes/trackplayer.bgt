double musicvolume=0, musicmaxvolume=120, musicpan=0, musicmaxpan=100, musicpitch=100, musicmaxpitch=200;
int musicslot, switchslot;
int applock=1, lockpass=0, menuchange=1, exitapp=1, pausesound=1, resumesound=1, pausefeedback=1, resumefeedback=1, shufflefeedback=1, timeadjust=1, effectstime=500;
int playsoundkey=1, paramsoundkey=1, resumekey=1, shufflekey=1, shufflesoundkey=1, timekey=1, exitprompt=1, volsound=1, pansound=1, pitchsound=1;
int volumeadjust=1, panadjust=1, pitchadjust=1, spokenvalues=1, spokenvolume=1, spokenpan=1, spokenpitch=1, resetvolume=1, resetpan=1, resetpitch=1;
string musictype="3dyw";
timer effectstimer;
void controlsmenu()
{
setupmenu(true);
m.add_item_tts("change volume", "decibel");
m.add_item_tts("change pan", "balance");
m.add_item_tts("change pitch", "semitone");
m.add_item_tts("play/pause", "resume");
m.add_item_tts("toggle shuffle sound", "shuffle");
m.add_item_tts("toggle playback sounds", "playback");
m.add_item_tts("toggle effectstimer", "timer");
m.add_item_tts("back", "back");
int mres=m.run("Controls menu",true);
string musim=m.get_item_name(mres);
if(mres==0)
{
speak("canceled");
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
return;
}
if(musim=="decibel")
{
string musvol=input.input("What would you like the music volume to be set to?");
if(musicvolume=="")
return;
musicvolume=string_to_number(musvol);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
if(musim=="balance")
{
string muspan=input.input("What would you like the music pan to be set to?");
if(musicpan=="")
return;
musicpan=string_to_number(muspan);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
if(musim=="semitone")
{
string muspitch=input.input("What would you like the music pitch to be set to?");
if(musicpitch=="")
return;
musicpitch=string_to_number(muspitch);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
if(musim=="resume")
{
if(pool.sound_is_playing(musicslot))
{
if(pausefeedback==1)  pool.play_stationary("sounds/misc/pause.wav",false);
pool.pause_sound(musicslot);
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else
{
if(resumefeedback==1)  pool.play_stationary("sounds/misc/play.wav",false);
pool.resume_sound(musicslot);
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(musim=="shuffle")
{
if(shufflefeedback==1)
{
speak("shuffle sound off");
pool.play_stationary_extended("sounds/misc/misc7.ogg",false,0,0,-5,100,false);
shufflefeedback=0;
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else
{
speak("shuffle sound on");
pool.play_stationary_extended("sounds/misc/misc6.ogg",false,0,0,-5,100,false);
shufflefeedback=1;
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(musim=="playback")
{
if(pausefeedback==1 and resumefeedback==1)
{
speak("playback sounds off");
pool.play_stationary_extended("sounds/misc/misc6.ogg",false,0,0,-5,100,false);
pausefeedback=0;
resumefeedback=0;
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else
{
speak("playback sounds on");
pool.play_stationary_extended("sounds/misc/misc7.ogg",false,0,0,-5,100,false);
pausefeedback=1;
resumefeedback=1;
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(musim=="timer")
{
if(timeadjust==1)
{
speak("timer adjustments off");
pool.play_stationary_extended("sounds/misc/misc26.ogg",false,0,0,-5,100,false);
effectstime=500;
timeadjust=0;
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else
{
speak("timer adjustments on");
pool.play_stationary_extended("sounds/misc/misc27.ogg",false,0,0,-5,100,false);
effectstime=100;
timeadjust=1;
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(musim=="back")
{
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
return;
}
}
void shufflemenu()
{
string[] tracklist=find_directories("sounds/music/*");
setupmenu(true);
for (uint i=0; i<tracklist.length(); i++)
{
m.add_item_tts(tracklist[i]);
}
int mres=m.run("Shuffle menu. What would you like to play?", true);
if(mres==0)
{
speak("canceled");
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
return;
}
if (mres==0 and mres>=tracklist.length())
{
return;
}
if (mres>0 and mres<=tracklist.length())
{
if(shufflefeedback==1)
{
pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
}
if(pool.sound_is_playing(musicslot))
{
musictype=tracklist[mres-1];
pool.destroy_sound(musicslot);
string[] tracks=find_files("sounds/music/"+musictype+"/music*");
musicslot=pool.play_stationary("sounds/music/"+musictype+"/"+tracks[random(0,tracks.length()-1)],true);
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
return;
}
}
}
void musplay()
{
string[] tracks=find_files("sounds/music/"+musictype+"/music*");
musicslot=pool.play_stationary("sounds/music/"+musictype+"/"+tracks[random(0,tracks.length()-1)],true);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
while(true)
{
if(key_pressed(KEY_GRAVE) and menuchange==1)
{
musicvolume=-10;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
controlsmenu();
}
if(key_pressed(KEY_1) and menuchange==1)
{
musicvolume=-10;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
shufflemenu();
}
if(key_pressed(KEY_LEFT))
{
musictype=get_new_track(musictype,1);
speak(musictype);
}
if(key_pressed(KEY_RIGHT))
{
musictype=get_new_track(musictype,2);
speak(musictype);
}
if(key_pressed(KEY_UP) and effectstime!=500)
{
if(timeadjust==1)
{
speak(effectstime+100+"ms");
pool.play_stationary("sounds/misc/medalbutton"+random(1,3)+".ogg",false);
effectstime+=100;
}
}
if (key_pressed(KEY_DOWN) and effectstime!=100)
{
if(timeadjust==1)
{
speak(effectstime-100+"ms");
pool.play_stationary("sounds/misc/medalbutton"+random(1,3)+".ogg",false);
effectstime-=100;
}
}
if (key_pressed(KEY_M) and timeadjust==1)
{
speak("controler timer,"+effectstime+"ms");
}
if(key_down(KEY_E))
{
volume_scroll_down();
}
if(key_down(KEY_Q))
{
volume_scroll_up();
}
if (key_pressed(KEY_S))
{
volume_step_down();
}
if (key_pressed(KEY_W))
{
volume_step_up();
}
if(key_down(KEY_K))
{
pitch_scroll_down();
}
if(key_down(KEY_I))
{
pitch_scroll_up();
}
if(key_pressed(KEY_F))
{
pitch_step_down();
}
if(key_pressed(KEY_J))
{
pitch_step_up();
}
if (key_down(KEY_A))
{
pan_scroll_down();
}
if (key_down(KEY_D))
{
pan_scroll_up();
}
if (key_pressed(KEY_Z))
{
pan_step_down();
}
if (key_pressed(KEY_C))
{
pan_step_up();
}
if (key_pressed(KEY_V) and spokenvolume==1)
{
speak("music volume,"+round(musicvolume+60/musicmaxvolume*100,2)+"percent");
}
if (key_pressed(KEY_N) and spokenpan==1)
{
speak("music pan,"+round(musicpan+50/musicmaxpan*100,2)+"percent");
}
if (key_pressed(KEY_H) and spokenpitch==1)
{
speak("music pitch,"+round(musicpitch/musicmaxpitch*100,2)+"percent");
}
if(key_pressed(KEY_L))
{
reset_volume();
}
if(key_pressed(KEY_P))
{
reset_pan();
}
if(key_pressed(KEY_T))
{
reset_pitch();
}
if(key_pressed(KEY_G) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
}
if(pool.sound_is_playing(musicslot))
{
pool.destroy_sound(musicslot);
string[] tracks=find_files("sounds/music/"+musictype+"/music*");
musicslot=pool.play_stationary("sounds/music/"+musictype+"/"+tracks[random(0,tracks.length()-1)],true);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(KEY_R) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
}
if(pool.sound_is_playing(musicslot))
{
musictype=get_new_track(musictype,3);
pool.destroy_sound(musicslot);
string[] tracks=find_files("sounds/music/"+musictype+"/music*");
musicslot=pool.play_stationary("sounds/music/"+musictype+"/"+tracks[random(0,tracks.length()-1)],true);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(KEY_TAB) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
}
if(pool.sound_is_playing(musicslot))
{
musictype="3dyw";
pool.destroy_sound(musicslot);
string[] tracks=find_files("sounds/music/"+musictype+"/music*");
musicslot=pool.play_stationary("sounds/music/"+musictype+"/"+tracks[random(0,tracks.length()-1)],true);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(KEY_SPACE) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
}
if(pool.sound_is_playing(musicslot))
{
musictype="gc";
pool.destroy_sound(musicslot);
string[] tracks=find_files("sounds/music/"+musictype+"/music*");
musicslot=pool.play_stationary("sounds/music/"+musictype+"/"+tracks[random(0,tracks.length()-1)],true);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(KEY_BACK) and shufflekey==1)
{
if(shufflefeedback==1)
{
pool.play_stationary("sounds/misc/shake"+random(1,2)+".wav",false);
}
if(pool.sound_is_playing(musicslot))
{
musictype="stw";
pool.destroy_sound(musicslot);
string[] tracks=find_files("sounds/music/"+musictype+"/music*");
musicslot=pool.play_stationary("sounds/music/"+musictype+"/"+tracks[random(0,tracks.length()-1)],true);
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
}
if(key_pressed(KEY_RETURN) and resumekey==1)
{
if(pool.sound_is_playing(musicslot))
{
if(pausefeedback==1)  pool.play_stationary("sounds/misc/pause.wav",false);
pool.pause_sound(musicslot);
}
else
{
if(resumefeedback==1)  pool.play_stationary("sounds/misc/play.wav",false);
pool.resume_sound(musicslot);
}
}
if (key_pressed(KEY_BACKSLASH) and shufflesoundkey==1)
{
if(shufflefeedback==1)
{
speak("shuffle sound off");
pool.play_stationary_extended("sounds/misc/misc7.ogg",false,0,0,-5,100,false);
shufflefeedback=0;
}
else
{
speak("shuffle sound on");
pool.play_stationary_extended("sounds/misc/misc6.ogg",false,0,0,-5,100,false);
shufflefeedback=1;
}
}
if(key_pressed(KEY_X) and playsoundkey==1)
{
if(pausefeedback==1 and resumefeedback==1)
{
speak("playback sounds off");
pool.play_stationary_extended("sounds/misc/misc6.ogg",false,0,0,-5,100,false);
pausefeedback=0;
resumefeedback=0;
}
else
{
speak("playback sounds on");
pool.play_stationary_extended("sounds/misc/misc7.ogg",false,0,0,-5,100,false);
pausefeedback=1;
resumefeedback=1;
}
}
if(key_pressed(KEY_B) and paramsoundkey==1)
{
if(volsound==1 and pansound==1 and pitchsound==1)
{
speak("adjustment sounds off");
pool.play_stationary_extended("sounds/misc/misc6.ogg",false,0,0,-5,100,false);
volsound=0;
pansound=0;
pitchsound=0;
}
else
{
speak("adjustment sounds on");
pool.play_stationary_extended("sounds/misc/misc7.ogg",false,0,0,-5,100,false);
volsound=1;
pansound=1;
pitchsound=1;
}
}
if(key_pressed(KEY_U) and timekey==1)
{
if(timeadjust==1)
{
speak("timer adjustments off");
pool.play_stationary_extended("sounds/misc/misc26.ogg",false,0,0,-5,100,false);
effectstime=500;
timeadjust=0;
}
else
{
speak("timer adjustments on");
pool.play_stationary_extended("sounds/misc/misc27.ogg",false,0,0,-5,100,false);
effectstime=100;
timeadjust=1;
}
}
if (key_pressed(KEY_Y))
{
if(applock==1)
{
speak("keys locked");
musicvolume=-10;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
pool.play_stationary("sounds/misc/lock.wav",false);
applock=0;
exitapp=0;
menuchange=0;
timeadjust=0;
pausefeedback=0;
resumefeedback=0;
shufflefeedback=0;
playsoundkey=0;
paramsoundkey=0;
shufflekey=0;
shufflesoundkey=0;
resumekey=0;
timekey=0;
volumeadjust=0;
panadjust=0;
pitchadjust=0;
spokenvolume=0;
spokenpan=0;
spokenpitch=0;
resetvolume=0;
resetpan=0;
resetpitch=0;
}
else if(lockpass==0)
{
speak("keys unlocked");
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
pool.play_stationary("sounds/misc/unlock.wav",false);
applock=1;
exitapp=1;
menuchange=1;
pausefeedback=1;
resumefeedback=1;
shufflefeedback=1;
playsoundkey=1;
paramsoundkey=1;
shufflekey=1;
shufflesoundkey=1;
resumekey=1;
timeadjust=1;
timekey=1;
volumeadjust=1;
panadjust=1;
pitchadjust=1;
spokenvolume=1;
spokenpan=1;
spokenpitch=1;
resetvolume=1;
resetpan=1;
resetpitch=1;
}
else if(lockpass==1)
{
string pass=input.input("enter the passcode to unlock all keys","7251369480");
if(pass!="7251369480")
{
speak("invalid passcode. Please try again.");
musicvolume=-10;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
}
else
{
speak("keys unlocked");
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
pool.play_stationary("sounds/misc/unlock.wav",false);
applock=1;
exitapp=1;
menuchange=1;
pausefeedback=1;
resumefeedback=1;
shufflefeedback=1;
playsoundkey=1;
paramsoundkey=1;
shufflekey=1;
shufflesoundkey=1;
resumekey=1;
timeadjust=1;
timekey=1;
volumeadjust=1;
panadjust=1;
pitchadjust=1;
spokenvolume=1;
spokenpan=1;
spokenpitch=1;
resetvolume=1;
resetpan=1;
resetpitch=1;
}
}
}
if(key_pressed(KEY_ESCAPE) and exitapp==1)
{
if(exitprompt==0)
{
musicvolume=-10;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
pool.destroy_sound(musicslot);
appmenu();
}
else if(exitprompt==1)
{
musicvolume=-10;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
setupmenu(true);
m.wrap_sound="none.ogg";
m.click_sound="sounds/misc/menu1.ogg";
m.enter_sound="sounds/misc/menu2.ogg";
m.open_sound="sounds/misc/menu3.ogg";
m.add_item_tts("yes");
m.add_item_tts("no");
int mres=m.run("Are you sure you want to exit?",true);
if(mres==0)
{
speak("canceled");
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
continue;
}
if(mres==1)
{
musicvolume=-10;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
wait(500);
pool.destroy_sound(musicslot);
m.stop_music();
appmenu();
}
if(mres==2)
{
musicvolume=0;
pool.update_sound_start_values(musicslot,musicpan,musicvolume,musicpitch);
speak("canceled");
continue;
}
}
}
}
}
string get_new_track(string track,int direction)
{
string[] tracklist=find_directories("sounds/music/*");
int trackindex=-1;
for (uint i=0; i<tracklist.length(); i++)
{
if(track==tracklist[i])
{
trackindex=i;
break;
}
}
if(trackindex==-1)
return track;
if (direction==1)
{
if(trackindex>-1)
trackindex--;
if(trackindex<0)
trackindex=tracklist.length()-1;
}
else if (direction==2)
{
if(trackindex>-1)
trackindex++;
if(trackindex>=tracklist.length())
trackindex=0;
}
else if (direction==3)
{
if(trackindex>-1)
trackindex=random(0,tracklist.length()-1);
}
return tracklist[trackindex];
}
